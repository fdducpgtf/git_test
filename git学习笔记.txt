git学习笔记：
1、创建SSH KEY：
ssh-keygen -t rsa -C "youremail@example.com"
youremail@example.com表示注册的邮箱。

说明：
第1步：如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。


2、检验是否能够连接远程git帐号：
ssh -T git@github.com
Hi fdducpgtf! You've successfully authenticated, but GitHub does not provide shell access.

显示当前已经连接过的远程代码仓库：
git remote -v

3、构建本地代码仓库：
git init
把当前目录作为本地代码仓库，并进行初始化。

4、连接远程代码仓库：
git remote add <自定义远程代码仓库的名称> git@github:com <远程代码仓库地址>
例如：
git remote add test_origin git@github.com:fdducpgtf/git_test
其中，“test_origin”是自定义的名称，以后远程连接时就使用这个名称了。“fdducpgtf/git_test”为自己的github帐号下的远程git_test代码仓库。

5、提交文件到本地代码仓库的暂存库、确认提交：
git add git学习笔记.txt (git add .提交当前目录及子目录下所有文件)
git commit -m "添加git学习笔记.txt文件！"

6、把本地master分支的最新修改推送至之前添加的GitHub远程代码仓库：
git push test_origin master (如果远程代码仓库是空的，可以：git push -u test_origin master)

7、把本地master分支的最新修改强行推送至之前添加的GitHub远程代码仓库：
git push -f test_origin master

8、把远程代码仓库分支与当前分支合并：
git pull test_origin master

9、用远程代码仓库强行覆盖本地文件：
git reset --hard test_origin/master

10、回退到某个本地版本：
git reset --hard <某个版本号>

11、显示提交记录：
git log
git reflog
git log是显示当前的HEAD和它的祖先的，递归是沿着当前指针的父亲，父亲的父亲，……，这样的原则。
git reflog根本不遍历HEAD的祖先。它是HEAD所指向的一个顺序的提交列表：它的undo历史。
reflog并不是repo（仓库）的一部分，它单独存储，而且不包含在pushes，fetches或者clones里面，它纯属是本地的。
reflog可以很好地帮助你恢复你误操作的数据，例如你错误地reset了一个旧的提交，或者rebase，……，这个时候你
可以使用reflog去查看在误操作之前的信息，并且使用git reset --hard 去恢复之前的状态。

12、丢弃工作区的修改（取代本地文件）：
git checkout -- git学习笔记.txt

一种是 git学习笔记.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是 git学习笔记.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

13、用最新的版本撤销暂存区的修改：
git reset HEAD git学习笔记.txt

相当于用上一次的提交撤销了暂存区的修改，
不会修改本地文件。

14、从最新的版本回退：
git reset --hard HEAD
HEAD 代表最新的一次修改提交。
会替换本地文件。

15、从任意版本回退：
git reset --hard <版本号>
版本号根据 git log或git reflog来得到。
包括从远程代码仓库回退。

16、删除文件：
git rm git学习笔记.txt


只要保存过一次，文件永远才能找回来，最多丢失
最新的修改而已。

17、恢复文件：
git checkout -- git学习笔记.txt
错误的话，只能用：
git reset HEAD git学习笔记.txt
小心：会丢失最近对文件的修改部分。

18、添加分支：
git branch new_branch  添加分支不切换到新分支

添加分支并自动切换到新分支
git checkout -b new_branch 
git switch -c new_branch

19、删除分支：
git branch -d new_branch


20、切换到某分支：
git checkout new_branch
git switch  new_branch


21、合并分支：
git checkout master 先切换到其它分支
git merge new_branch 再合并其它分支

git merge --no-off -m "非快速合并" new_branch 非快速合并合并


22、合并冲突：
合并冲突后，需要手动在文件里面解决冲突后完成合并。

23、工作场临时储存起来，然后就可以切换到其它分支：
git stash
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

24、工作场恢复：
git stash apply(要删除git stash drop)
git stash pop(不需要git stash drop)
git stash list(显示当前有多少stash

25、应用某个理性：
git cherry-pick <?>