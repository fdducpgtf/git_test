git学习笔记：
1、创建SSH KEY：
ssh-keygen -t rsa -C "youremail@example.com"
youremail@example.com表示注册的邮箱。

说明：
第1步：如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。


2、检验是否能够连接远程git帐号：
ssh -T git@github.com
Hi fdducpgtf! You've successfully authenticated, but GitHub does not provide shell access.

显示当前已经连接过的远程代码仓库：
git remote -v

3、构建本地代码仓库：
git init
把当前目录作为本地代码仓库，并进行初始化。

4、连接远程代码仓库：
git remote add <自定义远程代码仓库的名称> git@github:com <远程代码仓库地址>
例如：
git remote add test_origin git@github.com:fdducpgtf/git_test
其中，“test_origin”是自定义的名称，以后远程连接时就使用这个名称了。“fdducpgtf/git_test”为自己的github帐号下的远程git_test代码仓库。

5、提交文件到本地代码仓库的暂存库、确认提交：
git add git学习笔记.txt (git add .提交当前目录及子目录下所有文件)
git commit -m "添加git学习笔记.txt文件！"

6、把本地master分支的最新修改推送至之前添加的GitHub远程代码仓库：
git push test_origin master (如果远程代码仓库是空的，可以：git push -u test_origin master)

7、把本地master分支的最新修改强行推送至之前添加的GitHub远程代码仓库：
git push -f test_origin master

8、把远程代码仓库分支与当前分支合并：
git pull test_origin master

9、用远程代码仓库强行覆盖本地文件：
git reset --hard test_origin master

